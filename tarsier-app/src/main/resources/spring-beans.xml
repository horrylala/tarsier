<?xml version="1.0" encoding="UTF-8"?>
<!-- 整个配置文件的根节点，声明常用的命名空间定义，下面包含一个或多个bean元素 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
			
	<bean class="com.sf.tarsier.mvc.system.filter.EncryptablePropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:sysconfig.properties</value>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 开启注解处理器 -->
	<context:annotation-config/>
	
	<!-- 注解探测器,对所有类(Service)进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<!-- 不扫描带有@Controller注解的类。因为这些类已经随容器启动时，在servlet-context中扫描过一遍了 -->
	<context:component-scan base-package="com.sf.tarsier.mvc">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 数据源定义,使用c3p0 连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/business?charSet=UTF8"/>
		<property name="username" value="root"/>
		<property name="password" value="123456"/>
		
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialSize" value="1"/>
		<!-- 连接池中保留的最小连接数 -->
		<property name="minIdle" value="1"/>
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxActive" value="15"/>
		
		<!-- 配置获取连接等待超时的时间，单位是毫秒,60S -->
		<property name="maxWait" value="60000"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒,60S -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒  300S -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="select 1 from dual"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
				
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
		
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>
	
	<!--mybatis配置, 定义SessionFactory 并定义相关实体
	    MyBatis是如何将数据库字段与POJO对象进行映射的呢？规则是，属性首字母小写，使用驼峰式命名方式，而字段则是单词与单词间，用下划线连接。
	比如：数据库有个USER_NAME字段，那么与它对应的属性就应该是userName。如果字段命名没有使用下划线，那么属性可以直接定义成该单词。比如，NAME字段，它的属性就是name-->
	<bean id="mySessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--引入mybatis配置文件-->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--自动扫描mapping.xml文件-->
		<property name="mapperLocations" value="classpath:com/sf/tarsier/mvc/mapper/*Mapper.xml" />
	</bean>
	
	<!--手动刷新mapper，不需要重启服务-->
	<bean id="RefreshMybatisMapper" class="com.sf.tarsier.mvc.system.mapper.RefreshMybatisMapper">
		<property name="mySessionFactory" ref="mySessionFactory" />
		<property name="mapperLocations" value="classpath:com/sf/tarsier/mvc/mapper/*Mapper.xml" />
	</bean>
	
	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="myTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- spring tx:advice 和 aop:config 配置事务 -->
	<!-- 注：只有抛出 运行时异常事务才能回滚，throw new RuntimeException();  如果只写了controller中代码，抛出运行时异常也不会回滚。 或者加上 rollback-for="java.lang.Exception"  -->
	<!-- REQUIRED事务中运行，REQUIRES_NEW新建一个独立事务， NOT_SUPPORTED不需要事务运行-->
	<!-- 只读事务只是一个性能推荐的配置，并非强制限制，所以也可更新数据-->
    <tx:advice id="txAdvice" transaction-manager="myTransactionManager">
        <tx:attributes>
        	<tx:method name="create*"/>
        	<tx:method name="exe*"/>
        	<tx:method name="remove*"/>
        	
            <tx:method name="save*"/>
            <tx:method name="update*"/>
            <tx:method name="del*"/>
            
            <tx:method name="newsave*" propagation="REQUIRES_NEW"/>
            <tx:method name="newupdate*" propagation="REQUIRES_NEW"/>
            <tx:method name="newdel*" propagation="REQUIRES_NEW"/>
            
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
	
	<!--用于支持注解事务管理-->
	<!--tx:annotation-driven transaction-manager="myTransactionManager"/-->
	
	<!-- 开启基于@AspectJ切面的注解处理器 -->
	<aop:aspectj-autoproxy/>
	
	<!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，
		那么基于类的代理将起作用（这时需要cglib库）。如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用。
	切入点正则表达式：
	execution(public * *(..)) 匹配所有公有方法
	execution(* set*(..))  匹配所有以“set”开头的方法
	execution(* test.spring.action.UserAction.*(..)) 匹配UserAction类的所有方法
	execution(* test.spring.action.*.*(..))  匹配test.spring.action包下所有类的所有方法
	execution(* test.spring.action..*.*(..)) 匹配test.spring.action包及子包下所有类的所有方法
	 -->
    <aop:config proxy-target-class="true">       															 
        <aop:advisor pointcut="execution(* com.sf.tarsier.mvc.service..*.*(..))" advice-ref="txAdvice"/>
    </aop:config>
	
	<bean id="baseDAO" class="com.sf.tarsier.mvc.system.base.BaseDAO">
		<property name="mySessionFactory"><ref bean="mySessionFactory"></ref></property>
	</bean>
	
	<import resource="spring-config-job.xml"/>

</beans>